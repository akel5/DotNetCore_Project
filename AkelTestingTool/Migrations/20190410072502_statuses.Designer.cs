// <auto-generated />
using System;
using AkelTestingTool.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AkelTestingTool.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190410072502_statuses")]
    partial class statuses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AkelTestingTool.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .IsRequired();

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AkelTestingTool.Models.BugsSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bug")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("BugStatus")
                        .HasMaxLength(150);

                    b.Property<string>("BugSummary")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("ImageUrl");

                    b.Property<int>("ProjectsPId");

                    b.Property<DateTime>("PublicationDate");

                    b.Property<int>("Readers");

                    b.Property<string>("TesterName")
                        .HasMaxLength(150);

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectsPId");

                    b.HasIndex("UserId");

                    b.ToTable("BugsSummary");
                });

            modelBuilder.Entity("AkelTestingTool.Models.ProjectTests", b =>
                {
                    b.Property<int>("TId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PPublicationDate");

                    b.Property<int>("ProjectsPId");

                    b.Property<string>("TStatus")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("Test")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("TestedBy")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.HasKey("TId");

                    b.HasIndex("ProjectsPId");

                    b.ToTable("ProjectTests");
                });

            modelBuilder.Entity("AkelTestingTool.Models.Projects", b =>
                {
                    b.Property<int>("PId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PDescription")
                        .HasMaxLength(100);

                    b.Property<string>("PName")
                        .IsRequired();

                    b.HasKey("PId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("AkelTestingTool.Models.Status", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("AkelTestingTool.Models.TestCases", b =>
                {
                    b.Property<int>("TCId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ExpectedResult")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<DateTime>("PPublicationDate");

                    b.Property<int>("ProjectTestsTId");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("TestCase")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("TestCaseNum")
                        .IsRequired();

                    b.HasKey("TCId");

                    b.HasIndex("ProjectTestsTId");

                    b.ToTable("TestCases");
                });

            modelBuilder.Entity("AkelTestingTool.Models.TestExcutions", b =>
                {
                    b.Property<int>("TEId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PPublicationDate");

                    b.Property<int>("ProjectTestsTId");

                    b.Property<string>("TStatus")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.HasKey("TEId");

                    b.HasIndex("ProjectTestsTId");

                    b.ToTable("TestExcutions");
                });

            modelBuilder.Entity("AkelTestingTool.Models.TestsExeResults", b =>
                {
                    b.Property<int>("TERId2")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("PPublicationDate");

                    b.Property<int?>("ProjectTestsTId");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<int?>("TestCasesTCId");

                    b.Property<int?>("TestExcutionsTEId");

                    b.HasKey("TERId2");

                    b.HasIndex("ProjectTestsTId");

                    b.HasIndex("TestCasesTCId");

                    b.HasIndex("TestExcutionsTEId");

                    b.ToTable("TestsExeResults");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AkelTestingTool.Models.BugsSummary", b =>
                {
                    b.HasOne("AkelTestingTool.Models.Projects", "Projects")
                        .WithMany()
                        .HasForeignKey("ProjectsPId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AkelTestingTool.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("AkelTestingTool.Models.ProjectTests", b =>
                {
                    b.HasOne("AkelTestingTool.Models.Projects", "Projects")
                        .WithMany()
                        .HasForeignKey("ProjectsPId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AkelTestingTool.Models.TestCases", b =>
                {
                    b.HasOne("AkelTestingTool.Models.ProjectTests", "ProjectTests")
                        .WithMany()
                        .HasForeignKey("ProjectTestsTId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AkelTestingTool.Models.TestExcutions", b =>
                {
                    b.HasOne("AkelTestingTool.Models.ProjectTests", "ProjectTests")
                        .WithMany()
                        .HasForeignKey("ProjectTestsTId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AkelTestingTool.Models.TestsExeResults", b =>
                {
                    b.HasOne("AkelTestingTool.Models.ProjectTests", "ProjectTests")
                        .WithMany()
                        .HasForeignKey("ProjectTestsTId");

                    b.HasOne("AkelTestingTool.Models.TestCases", "TestCases")
                        .WithMany()
                        .HasForeignKey("TestCasesTCId");

                    b.HasOne("AkelTestingTool.Models.TestExcutions", "TestExcutions")
                        .WithMany()
                        .HasForeignKey("TestExcutionsTEId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AkelTestingTool.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AkelTestingTool.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("AkelTestingTool.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AkelTestingTool.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
